// Generated by CoffeeScript 1.9.3
(function() {
  "use strict";
  var fifteenPuzzleService;

  fifteenPuzzleService = angular.module("fifteenPuzzleService", []);

  fifteenPuzzleService.factory("fifteenPuzzle", function() {
    var SlidingPuzzle, shuffle;
    shuffle = function(a) {
      var i, j, q, x;
      q = void 0;
      j = void 0;
      x = void 0;
      i = a.length;
      while (i) {
        q = 0;
        j = parseInt(Math.random() * i, 10);
        x = a[--i];
        a[i] = a[j];
        a[j] = x;
      }
      return a;
    };
    SlidingPuzzle = function(rows, cols) {
      var id;
      this.grid = [];

      /*
      Moves tile
      @param srow
      @param scol
       */
      this.move = function(srow, scol) {
        var d, dirs, results, tcol, tref, trow;
        dirs = [[1, 0], [-1, 0], [0, 1], [0, -1]];
        tref = void 0;
        trow = void 0;
        tcol = void 0;
        d = 0;
        results = [];
        while (d < dirs.length) {
          trow = srow + dirs[d][0];
          tcol = scol + dirs[d][1];
          if (this.grid[trow] && this.grid[trow][tcol] && this.grid[trow][tcol].empty) {
            tref = this.grid[srow][scol];
            this.grid[srow][scol] = this.grid[trow][tcol];
            this.grid[trow][tcol] = tref;
          }
          results.push(d++);
        }
        return results;
      };
      this.shuffle = function() {
        var tiles;
        tiles = [];
        this.traverse(function(tile) {
          return tiles.push(tile);
        });
        shuffle(tiles);
        return this.traverse(function(tile, row, col) {
          return this.grid[row][col] = tiles.shift();
        });
      };
      this.isSolved = function() {
        var col, id, row;
        id = 1;
        row = 0;
        while (row < rows) {
          col = 0;
          while (col < cols) {
            if (this.grid[row][col].id !== id++) {
              return false;
            }
            col++;
          }
          row++;
        }
        return true;
      };
      this.traverse = function(fn) {
        var col, results, row;
        row = 0;
        results = [];
        while (row < rows) {
          col = 0;
          while (col < cols) {
            fn.call(this, (this.grid && this.grid[row] ? this.grid[row][col] : void 0), row, col);
            col++;
          }
          results.push(row++);
        }
        return results;
      };
      id = 1;
      this.traverse(function(tile, row, col) {
        if (!this.grid[row]) {
          this.grid[row] = [];
        }
        this.grid[row][col] = {
          id: id++,
          empty: row === rows - 1 && col === cols - 1
        };
        if (this.grid[row][col].empty) {
          return this.empty = this.grid[row][col];
        }
      });
    };
    return function(rows, cols) {
      return new SlidingPuzzle(rows, cols);
    };
  });

}).call(this);
